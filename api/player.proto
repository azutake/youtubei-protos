syntax = "proto2";

import "common.proto";
import "command.proto";
import "api/innertube_context.proto";
import "api/framework_updates.proto";
package pfinnertube;

message PlayerRequest {
    optional InnerTubeContext context = 1;
    required string video_id = 2;
}

message StreamingData {
    message AdaptiveFormat {
        message Range {
            optional uint64 start = 3;
            optional uint64 end = 4;
        }

        enum ProjectionType {
            UNKNOWN = 0;
            RECTANGULAR = 1;
        }

        optional int32 itag = 1;
        required string url = 2;
        required string mime_type = 5;
        optional uint64 bitrate = 6;
        optional uint32 width = 7;
        optional uint32 height = 8;
        optional Range init_range = 9;
        optional Range index_range = 10;
        optional uint64 last_modified = 11;
        optional uint64 content_length = 12;
        required string quality = 16;
        optional uint32 fps = 25;
        required string quality_label = 26;
        optional ProjectionType projection_type = 27;
        optional uint64 average_bitrate = 31;
        optional uint64 approx_duration_ms = 44;
    }

    optional uint32 expires_in_seconds = 1;
    repeated AdaptiveFormat adaptive_formats = 3 [packed = false];
    required string hls_manifest_url = 5;
    optional float aspect_ratio = 13;
    required string server_abr_streaming_url = 15;
}

message PlaybackTracking {
    message Header {
        enum HeaderType {
            UNKNOWN = 0;
            USER_AUTH = 1;
            VISITOR_ID = 2;
        }

        optional HeaderType header_type = 1;
    }

    message TrackingUrl {
        required string base_url = 1;
        optional uint32 elapsed_media_time_seconds = 2;
        repeated Header headers = 3 [packed = false];
    }

    message EngageUrl {
        required string base_url = 1;
        repeated Header headers = 2 [packed = false];
    }

    optional TrackingUrl videostats_playback_url = 1;
    optional TrackingUrl videostats_delayplay_url = 2;
    optional TrackingUrl videostats_watchtime_url = 3;
    optional TrackingUrl ptracking_url = 4;
    optional TrackingUrl qoe_url = 5;
    optional TrackingUrl atr_url = 13;
    optional EngageUrl engage_url = 15;
    repeated uint32 videostats_scheduled_flush_walltime_seconds = 16 [packed = false];
    optional uint32 videostats_default_flush_interval_seconds = 17;
    optional TrackingUrl youtube_remarketing_url = 18;
}

message PlayabilityStatus {
    enum Status {
        OK = 0;
		ERROR = 1;
		UNPLAYABLE = 2;
		LOGIN_REQUIRED = 3;
		CONTENT_CHECK_REQUIRED = 4;
		AGE_CHECK_REQUIRED = 5;
		LIVE_STREAM_OFFLINE = 6;
		GL_PLAYBACK_REQUIRED = 8;
		AGE_VERIFICATION_REQUIRED = 9;
    }

    required Status status = 1;
    required string reason = 2;
    optional Renderer error_screen = 8;
    required bool playable_in_embed = 9;
    optional Renderer offlineability = 10;
    optional Renderer miniplayer = 24;
    required string context_params = 31;
}

message PlayerVideoDetails {
    
    required string video_id = 1;
    required string title = 15;
    optional uint32 length_seconds = 16;
    repeated string keywords = 18 [packed = false];
    required string channel_id = 19;
    optional bool is_owner_viewing = 20;
    required string short_description = 21;
    optional bool is_crawlable = 22;
    optional ThumbnailDetails thumbnail = 25;
    optional bool allow_ratings = 31;
    required string view_count = 32;
    required string author = 33;
    optional bool is_low_latency_live_stream = 35;
    optional bool is_private = 37;
    optional bool is_unplugged_corpus = 38;
    optional MdeStreamOptimizationsRendererLatency latency_class = 39;
    optional bool is_live_content = 41;
}

message PlayerConfig {

}

message PlayerResponse {
  optional ResponseContext response_context = 1;
  optional PlayabilityStatus playability_status = 2;
  optional StreamingData streaming_data = 4;
  optional PlaybackTracking playback_tracking = 9;
  optional Renderer captions = 10;
  optional PlayerVideoDetails video_details = 11;
  optional PlayerConfig player_config = 15;
  optional Renderer storyboards = 16;
  optional Renderer microformat = 19;
  optional bytes tracking_params = 21;
  optional Renderer attestation = 22;
  optional Renderer endscreen = 32;
  repeated InnertubeCommand on_response_received_endpoints = 36 [packed = false];
  optional Renderer overlay = 42;
  repeated Renderer player_overlay_layer_renderers = 60 [packed = false];
  required string ad_break_heartbeat_params = 69;
  optional FrameworkUpdates framework_updates = 777;
}

// https://youtubei.googleapis.com/youtubei/v1/get_watch?id=W4bMYwTSYPA